// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwapiBackend.Data;

namespace SwapiBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200928174345_Updateee")]
    partial class Updateee
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SwapiBackend.Models.ParkingSpot", b =>
                {
                    b.Property<int>("ParkingSpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int?>("SpacePortId")
                        .HasColumnType("int");

                    b.HasKey("ParkingSpotId");

                    b.HasIndex("SpacePortId");

                    b.ToTable("Parkingspot");

                    b.HasData(
                        new
                        {
                            ParkingSpotId = 1,
                            IsOccupied = false,
                            SpacePortId = 1
                        },
                        new
                        {
                            ParkingSpotId = 2,
                            IsOccupied = false,
                            SpacePortId = 1
                        },
                        new
                        {
                            ParkingSpotId = 3,
                            IsOccupied = false,
                            SpacePortId = 1
                        },
                        new
                        {
                            ParkingSpotId = 4,
                            IsOccupied = false,
                            SpacePortId = 1
                        },
                        new
                        {
                            ParkingSpotId = 5,
                            IsOccupied = false,
                            SpacePortId = 1
                        });
                });

            modelBuilder.Entity("SwapiBackend.Models.SpacePort", b =>
                {
                    b.Property<int>("SpacePortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpacePortId");

                    b.ToTable("Parkinglot");

                    b.HasData(
                        new
                        {
                            SpacePortId = 1,
                            Name = "Nojjan"
                        });
                });

            modelBuilder.Entity("SwapiBackend.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("SwapiBackend.Models.VisitorParking", b =>
                {
                    b.Property<int>("ParkingSpotId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("ParkingSpotId", "VisitorId");

                    b.ToTable("VisitorParkings");
                });

            modelBuilder.Entity("SwapiBackend.Models.ParkingSpot", b =>
                {
                    b.HasOne("SwapiBackend.Models.SpacePort", "SpacePort")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("SpacePortId");
                });
#pragma warning restore 612, 618
        }
    }
}
